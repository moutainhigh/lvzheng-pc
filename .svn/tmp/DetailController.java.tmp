package com.jx.hunter.lvzhengpc.controllers;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alibaba.fastjson.JSON;
import com.jx.argo.ActionResult;
import com.jx.argo.annotations.Path;
import com.jx.blackface.gaea.sell.entity.LvzProductCateEntity;
import com.jx.blackface.gaea.sell.entity.LvzProductEntity;
import com.jx.blackface.gaea.sell.entity.LvzProductInfoEntity;
import com.jx.blackface.gaea.sell.entity.LvzSellProductEntity;
import com.jx.blackface.gaea.usercenter.entity.BFAreasEntity;
import com.jx.blackface.gaea.usercenter.utils.ActionResultUtils;
import com.jx.hunter.lvzhengpc.common.LocationPage;
import com.jx.hunter.lvzhengpc.frame.RSBLL;
import com.jx.hunter.lvzhengpc.utils.EntityUtils;
import com.jx.hunter.lvzhengpc.utils.MenuUtils;
import com.jx.hunter.lvzhengpc.utils.PropertiesUtils;
import com.jx.service.newcore.entity.FAQEntity;
import com.jx.tradework.entity.PreferentialPacketEntity;
import com.jx.tradework.preferentialplug.buz.PreferentialPCBuz;
import com.jx.tradework.preferentialplug.buz.PreferentialRecommendBuz;
import com.jx.tradework.vo.PacketVO;
@Path("/commondetail")
public class DetailController extends BaseController{
	
	//表类别1一级分类id2二级分类id3商品id4定价条目id
	
	/**
	 * 根据商品id查询详情
	 * @param productid
	 * @return
	 */
	@Path("/detail/{productid:\\d+}.html")
	public ActionResult detail(long productid){
		
		try {
			//cityid和areaid的集合
			Set<Long> cityids = new HashSet<Long>();
			Set<Long> areaids = new HashSet<Long>();
			ArrayList<BFAreasEntity> cityList = new ArrayList<BFAreasEntity>();
			ArrayList<BFAreasEntity> areaList = new ArrayList<BFAreasEntity>();
			
			
			//获取商品集合
			String child_code = RSBLL.getstance().getLvzProductService().getProductEntityById(productid)==null?"0":RSBLL.getstance().getLvzProductService().getProductEntityById(productid).getChild_cate_code();
			
			//虚拟地址--转跳
			if("GS-001003".equals(child_code)){
				//beat().getResponse().sendRedirect("http://www.lvzheng.com/addresslist.html");
				return redirect("http://www.lvzheng.com/addresslist.html");
				//return ActionResultUtils.renderJson("");
			}
			
			List<LvzProductEntity> list_Product = RSBLL.getstance().getLvzProductService().getProductEntityByChildcatecode(child_code);
			
			
			List<LvzSellProductEntity> list = RSBLL.getstance().getLvzSellProductService().getSellProductEntityList(" sell_upderdesc =  0 and  product_id="+productid+"  ", 1, 99, "");
			
			
			//根据产品id填充相关的城市和区域不重复集合
			getSetIds(productid, cityids, areaids, list);
			
			//根据set集合获取填充城市区域的详细信息集合
			getQYInfo(cityids, cityList);
			
			getQYInfo(areaids, areaList);
			
			
			model().add("list", list_Product.size()==0?"":list_Product);
			
			//排序城市+区域
			EntityUtils.sortList(cityList, "areaid", true);
			EntityUtils.sortList(areaList, "areaid", true);
			model().add("city", cityList.size()==0?"":cityList);
			model().add("area", areaList.size()==0?"":areaList);
			
			
			long areaid  = areaList.size()>0?areaList.get(0).getAreaid():0;
			long cityid  = cityList.size()>0?cityList.get(0).getAreaid():0;
			model().add("areaid", areaid);
			model().add("cityid", cityid);
			model().add("productid", productid);
			
			
			//计算价格的单条记录
			LvzSellProductEntity model = RSBLL.getstance().getLvzSellProductService().getSellProductEntityList("  sell_upderdesc =  0 and product_id="+productid+" and city_id="+cityid+" and area_id="+areaid, 1, 99, "").size()>0?RSBLL.getstance().getLvzSellProductService().getSellProductEntityList(" sell_upderdesc =  0 and product_id="+productid+" and city_id="+cityid+" and area_id="+areaid, 1, 99, "").get(0):null;
			
			
			model().add("model", model==null?"":model);
			
			
			//商品相关信息查询
			LvzProductInfoEntity info = RSBLL.getstance().getInfoService().getProductInfoEntityList(" info_id="+productid, 1, 1, "").size()>0?RSBLL.getstance().getInfoService().getProductInfoEntityList(" info_id="+productid, 1, 1, "").get(0):null;
			if(info!=null){
				List<String> img = new ArrayList<String>();
				String images = info.getImage_url();
				String[] str = images.split(";");
				for(String s:str){
					img.add(s);
				}
				model().add("img", img);
				model().add("info", info);
			}
			
			
			//查询该商品对应的一级+2级菜单
			String p_code = "0";
			String c_code = "0";
			LvzProductEntity pm = RSBLL.getstance().getLvzProductService().getProductEntityById(productid);
			
			if(pm!=null){
				p_code = pm.getParent_cate_code();
				c_code = pm.getChild_cate_code();
			}
			
			LvzProductCateEntity catModel = RSBLL.getstance().getLvzProductCateService().getProductCateEntityByCode(p_code);
			
			if(catModel!=null){
				model().add("catModel", catModel);
			}
			
			LvzProductCateEntity catModel2 = RSBLL.getstance().getLvzProductCateService().getProductCateEntityByCode(c_code);
			
			if(catModel2!=null){
				model().add("catModel2", catModel2);
			}
			
			
			//product实体
			model().add("pModel",RSBLL.getstance().getLvzProductService().getProductEntityById(productid)==null?"":RSBLL.getstance().getLvzProductService().getProductEntityById(productid));
			
			//model.getCity_id()
			//model.getArea_id()
			//pm.getProduct_code();
			//model.getSell_overprice()
			//PreferentialRecommendBuz.getInstance().deleteAllPacketCache();
			//PreferentialRecommendBuz.getInstance().getBestPreferentialByProduct(pm.getProduct_code(), model.getCity_id(), model.getArea_id(), 2);
			
			//相关服务
			getRef();
			//优惠券提示
//			getPreferential();
			
			//常见问题
			long catid2 =  RSBLL.getstance().getArticleCateRelationService().getArticleCateidByProductCateId(catModel2.getCate_id());
			
			List<FAQEntity> faqlist = RSBLL.getstance().getFAQService().getFAQList("cateid2="+catid2+" and state=1", 1, 3, "");
			model().add("faqlist", faqlist);
			
			//转到的页面路径
			model().add("LocationPage", new LocationPage("detail","index"));
		
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return view("/index");
	}


	
	/**
	 * 根据商品id、城市id、区域id查询详情
	 * @param productid
	 * @return
	 */
	@Path("/details/{productid:\\d+}/{cityid:\\d+}/{areaid:\\d+}.html")
	public ActionResult details(long productid,long cityid,long areaid){
		
		try {
			
			//把菜单填充到map
			model().add("one_", MenuUtils.menuUtils.getMenuOneByCached());
			model().add("one", MenuUtils.menuUtils.getMenuTwoByCached());
			
			//cityid和areaid的集合
			Set<Long> cityids = new HashSet<Long>();
			Set<Long> areaids = new HashSet<Long>();
			ArrayList<BFAreasEntity> cityList = new ArrayList<BFAreasEntity>();
			ArrayList<BFAreasEntity> areaList = new ArrayList<BFAreasEntity>();
			
			
			//获取商品集合
			String child_code = RSBLL.getstance().getLvzProductService().getProductEntityById(productid)==null?"0":RSBLL.getstance().getLvzProductService().getProductEntityById(productid).getChild_cate_code();
			List<LvzProductEntity> list_Product = RSBLL.getstance().getLvzProductService().getProductEntityByChildcatecode(child_code);
			
			
			List<LvzSellProductEntity> list = RSBLL.getstance().getLvzSellProductService().getSellProductEntityList(" sell_upderdesc =  0 and product_id="+productid, 1, 99, "");
			
			//根据产品id填充相关的城市和区域不重复集合
			getSetIds(productid, cityids, areaids, list);
			
			//点击的商品不包含这个城市，重置选中的 城市
			if(!cityids.contains(cityid)){
				cityid = cityids.size()>0?new ArrayList<Long>(cityids).get(0):0;
			}
			
			//根据set集合获取填充城市区域的详细信息集合
			getQYInfo(cityids, cityList);
			
			//根据城市id和商品id查询区域集合
			
			getAreasSetIds(productid, cityid, areaids);
			//根据set集合获取填充区域的详细信息集合
			getQYInfo(areaids, areaList);
			
			
		
			
			//排序城市+区域
			EntityUtils.sortList(cityList, "areaid", true);
			EntityUtils.sortList(areaList, "areaid", true);
			
			
			
			//点击的城市不包含这个区域，重置选中的 区域
			if(!areaids.contains(areaid)){
				areaid  = areaList.size()>0?areaList.get(0).getAreaid():0;
			}
			
			
			
			//计算价格的单条记录
			LvzSellProductEntity model = RSBLL.getstance().getLvzSellProductService().getSellProductEntityList(" sell_upderdesc =  0 and product_id="+productid+" and city_id="+cityid+" and area_id="+areaid, 1, 99, "").size()>0?RSBLL.getstance().getLvzSellProductService().getSellProductEntityList(" sell_upderdesc =  0 and product_id="+productid+" and city_id="+cityid+" and area_id="+areaid, 1, 99, "").get(0):null;
			
			model().add("list", list_Product==null?"":list_Product);
			model().add("city", cityList==null?"":cityList);
			model().add("area", areaList==null?"":areaList);
			
			model().add("areaid", areaid);
			model().add("cityid", cityid);
			model().add("productid", productid);
			
			model().add("model", model==null?"":model);
			
			//商品相关信息查询
			LvzProductInfoEntity info = RSBLL.getstance().getInfoService().getProductInfoEntityList(" info_id="+productid, 1, 1, "").size()>0?RSBLL.getstance().getInfoService().getProductInfoEntityList(" info_id="+productid, 1, 1, "").get(0):null;
			if(info!=null){
				List<String> img = new ArrayList<String>();
				String images = info.getImage_url();
				String[] str = images.split(";");
				for(String s:str){
					img.add(s);
				}
				model().add("img", img);
				model().add("info", info);
			}
			
			//查询该商品对应的一级+2级菜单
			String p_code = "0";
			String c_code = "0";
					LvzProductEntity  pm=		RSBLL.getstance().getLvzProductService().getProductEntityById(productid);
			
			if(pm!=null){
				p_code = pm.getParent_cate_code();
				c_code = pm.getChild_cate_code();
			}
			
			LvzProductCateEntity catModel = RSBLL.getstance().getLvzProductCateService().getProductCateEntityByCode(p_code);
			
			if(catModel!=null){
				model().add("catModel", catModel);
			}
			
			LvzProductCateEntity catModel2 = RSBLL.getstance().getLvzProductCateService().getProductCateEntityByCode(c_code);
			
			if(catModel2!=null){
				model().add("catModel2", catModel2);
			}

			//product实体
			model().add("pModel",RSBLL.getstance().getLvzProductService().getProductEntityById(productid)==null?"":RSBLL.getstance().getLvzProductService().getProductEntityById(productid));
			
			//相关服务
			getRef();
			
			//常见问题
			long catid2 =  RSBLL.getstance().getArticleCateRelationService().getArticleCateidByProductCateId(catModel2.getCate_id());
			
			List<FAQEntity> faqlist = RSBLL.getstance().getFAQService().getFAQList("cateid2="+catid2+" and state=1", 1, 3, "");
			model().add("faqlist", faqlist);
			
			//转到的页面路径
			model().add("LocationPage", new LocationPage("detail","index"));
		
		
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return view("/index");
	}
	
	
	/**
	 * 根据商品id、城市id、区域id查询价格并且异步返回
	 * @param pid|cityid|areaid
	 * @return
	 */
	@Path("/detail/queryPrice")
	public ActionResult queryPrice(){
		
			String pid = beat().getRequest().getParameter("pid");
			String cityid = beat().getRequest().getParameter("cityid");
			String areaid = beat().getRequest().getParameter("areaid");
			float sellprice = 0 ;
			float marketprice = 0 ;
			long  sellid = 0 ;
			Map map = new HashMap<String, Object>();
		
		try {
			List<LvzSellProductEntity> slist = RSBLL.getstance().getLvzSellProductService().getSellProductEntityList(" sell_upderdesc =  0 and product_id="+pid+" and city_id="+cityid+" and area_id="+areaid, 1, 99, "");
			
			if(slist!=null){
				if(slist.size()>0){
					 sellprice  = slist.get(0).getSell_overprice();
					 marketprice =  slist.get(0).getSell_markprice();
					 sellid = slist.get(0).getSell_id();
					 map.put("sellprice", sellprice);
					 map.put("marketprice", marketprice);
					 map.put("sellid", sellid);
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return ActionResultUtils.renderJson(JSON.toJSONString(map));
	}

	
	/**
	 * 根据选的城市切换区域列表
	 * @param pid|cityid|areaid
	 * @return
	 */
	@Path("/detail/queryCity")
	public ActionResult queryCity(){
		
			//获取参数
			String pid = beat().getRequest().getParameter("pid");
			String cityid = beat().getRequest().getParameter("cityid");
			String areaid = beat().getRequest().getParameter("areaid");
			
			//定义容器
			ArrayList<BFAreasEntity> areaList = new ArrayList<BFAreasEntity>();
			Set<Long> areaids = new HashSet<Long>();
			float sellprice = 0 ;
			float marketprice = 0 ;
			long  sellid = 0 ;
			Map map = new HashMap<String, Object>();
		
		try {
			//根据cityid获取区域代码集合
			getAreasSetIds(Long.valueOf(pid), Long.valueOf(cityid), areaids);
			//根据区域代码集合获取区域详细信息集合
			getQYInfo(areaids, areaList);
			map.put("area", areaList);
			//区域排序
			EntityUtils.sortList(areaList, "areaid", true);
			//点击的城市不包含这个区域，重置选中的 区域
			if(!areaids.contains(areaid)){
				areaid  = areaList.size()>0?String.valueOf(areaList.get(0).getAreaid()):"0";
			}
			//查询价格
			List<LvzSellProductEntity> slist = RSBLL.getstance().getLvzSellProductService().getSellProductEntityList(" sell_upderdesc =  0 and product_id="+pid+" and city_id="+cityid+" and area_id="+areaid, 1, 99, "");
			
			if(slist!=null){
				if(slist.size()>0){
					 sellprice  = slist.get(0).getSell_overprice();
					 marketprice =  slist.get(0).getSell_markprice();
					 sellid = slist.get(0).getSell_id();
					 map.put("sellprice", sellprice);
					 map.put("marketprice", marketprice);
					 map.put("sellid", sellid);
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return ActionResultUtils.renderJson(JSON.toJSONString(map));
	}



	
	//---------------extracted FUNCTIONS below-----------
	
	/**
	 * 
	 * 根据参数填充area区域的set集合
	 * @param productid
	 * @param cityid
	 * @param areaids
	 * @throws Exception
	 */
	public void getAreasSetIds(long productid, long cityid, Set<Long> areaids)
			throws Exception {
		List<LvzSellProductEntity> list2 = RSBLL.getstance().getLvzSellProductService().getSellProductEntityList("  sell_upderdesc =  0 and product_id="+productid+" and city_id="+cityid, 1, 99, "");
		areaids.clear();
		for(LvzSellProductEntity m:list2){
			areaids.add(m.getArea_id());
		}
	}
	/**
	 * 根据产品id填充相关的城市和区域不重复集合
	 * @param productid
	 * @param cityids
	 * @param areaids
	 * @param list
	 * @throws Exception
	 */
	public void getSetIds(long productid, Set<Long> cityids, Set<Long> areaids,
			List<LvzSellProductEntity> list) throws Exception {
		for(LvzSellProductEntity m:list){
			cityids.add(m.getCity_id());
		}
		long cityid_ = cityids.size()>0?new ArrayList<Long>(cityids).get(0):1; 
		//取得页面显示的区预集合
		List<LvzSellProductEntity> list_ = RSBLL.getstance().getLvzSellProductService().getSellProductEntityList("  sell_upderdesc =  0 and product_id="+productid+" and city_id="+cityid_, 1, 99, "");
		
		for(LvzSellProductEntity m:list_){
			areaids.add(m.getArea_id());
		}
	}

	/**
	 * 根据set集合获取填充城市区域的详细信息集合
	 * @param setids_
	 * @param setList
	 * @throws Exception
	 */
	public void getQYInfo(Set<Long> setids_, ArrayList<BFAreasEntity> setList)
			throws Exception {
		Iterator<Long> setids = setids_.iterator();
		
		while(setids.hasNext()){
			
			BFAreasEntity m = RSBLL.getstance().getCityService().getAeasEntityById(setids.next());
			if(m!=null){
				setList.add(m);
			}
		}
	}
	
	
	/**
	 * 相关服务
	 */
	public void getRef() {
		//相关服务
		List<Map<String, String>> reflist = new ArrayList<Map<String,String>>();
		for (int i = 1; i <= 3; i++) {
			Map refMap = new HashMap<String, String>();
			String name  = PropertiesUtils.getProp("ref"+i+".name");
			String tip   = PropertiesUtils.getProp("ref"+i+".tip");
			String price = PropertiesUtils.getProp("ref"+i+".price");
			String path  = PropertiesUtils.getProp("ref"+i+".path");
			refMap.put("name",name );
			refMap.put("tip",tip  ); 
			refMap.put("price",price); 
			refMap.put("path",path ); 
			reflist.add(refMap);
		}
		
		model().add("reflist", reflist);
	}
	
	/**
	 * 获取优惠券
	 */
	public void getPreferential(){
		List<PacketVO> showPackets = new ArrayList<PacketVO>();
		List<String> packetIds = new ArrayList<String>();
		packetIds.add("39601499874049");
		packetIds.add("39601455436289");
		for(String id : packetIds){
			PacketVO p = PreferentialPCBuz.getInstance().getPacketById(id,null);
			showPackets.add(p);
		}
		model().add("packets",showPackets);
	}

	
	

}
