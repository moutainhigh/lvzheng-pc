package com.jx.hunter.lvzhengpc.controllers;

import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang.StringUtils;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SimpleDateFormatSerializer;
import com.jx.argo.ActionResult;
import com.jx.argo.annotations.Path;
import com.jx.blackface.gaea.sell.entity.LvzPackageEntity;
import com.jx.blackface.gaea.sell.entity.LvzPackageSellEntity;
import com.jx.blackface.gaea.sell.entity.LvzProductCateEntity;
import com.jx.blackface.gaea.sell.entity.LvzProductEntity;
import com.jx.blackface.gaea.sell.entity.LvzProductInfoEntity;
import com.jx.blackface.gaea.sell.entity.LvzQAinfoEntity;
import com.jx.blackface.gaea.sell.entity.LvzSellProductEntity;
import com.jx.blackface.gaea.usercenter.entity.BFAreasEntity;
import com.jx.blackface.gaea.usercenter.utils.ActionResultUtils;
import com.jx.hunter.lvzhengpc.common.CommonUtils;
import com.jx.hunter.lvzhengpc.common.LocationPage;
import com.jx.hunter.lvzhengpc.frame.RSBLL;
import com.jx.hunter.lvzhengpc.utils.EntityUtils;
import com.jx.hunter.lvzhengpc.utils.PageUtils;
import com.jx.hunter.lvzhengpc.utils.ProductUtils;
import com.jx.hunter.lvzhengpc.utils.PropertiesUtils;
import com.jx.service.newcore.entity.FAQEntity;
import com.jx.service.preferential.plug.buz.PreferentialMatchBuz;
import com.jx.service.preferential.plug.vo.PacketVO;
@Path("/commondetail")
public class DetailController extends BaseController{
	
	private static SerializeConfig mapping = new SerializeConfig(); static { 
        mapping.put(Date.class, new SimpleDateFormatSerializer("yyyy-MM-dd HH:mm:ss")); 
	} 
	
	//表类别1一级分类id2二级分类id3商品id4定价条目id
	
	/**
	 * 根据商品id查询详情
	 * @param productid
	 * @return
	 */
	@Path("/detail/{productid:\\d+}.html")
	public ActionResult detail(long productid){
		
		try {
			//添加某专题页选中某区域的映射
			String sel_zt = beat().getRequest().getParameter("sel_zt");
			if(StringUtils.isNotEmpty(sel_zt)){
				model().add("sel_zt", sel_zt);
			}
			
			
			//cityid和areaid的集合
			Set<Long> cityids = new HashSet<Long>();
			Set<Long> areaids = new HashSet<Long>();
			ArrayList<BFAreasEntity> cityList = new ArrayList<BFAreasEntity>();
			ArrayList<BFAreasEntity> areaList = new ArrayList<BFAreasEntity>();
			
			
			//获取商品集合
			String child_code = RSBLL.getstance().getLvzProductService().getProductEntityById(productid)==null?"0":RSBLL.getstance().getLvzProductService().getProductEntityById(productid).getChild_cate_code();
			
			//虚拟地址--转跳
			if("GS-001003".equals(child_code)){
				//beat().getResponse().sendRedirect("http://www.lvzheng.com/addresslist.html");
				return redirect("http://www.lvzheng.com/addresslist.html");
				//return ActionResultUtils.renderJson("");
			}
			
			List<LvzProductEntity> list_Product = RSBLL.getstance().getLvzProductService().getProductEntityByChildcatecode(child_code);
			
			
			List<LvzSellProductEntity> list = RSBLL.getstance().getLvzSellProductService().getSellProductEntityList(" sell_upderdesc =  0 and  product_id="+productid+"  ", 1, 99, "");
			
			
			//根据产品id填充相关的城市和区域不重复集合
			getSetIds(productid, cityids, areaids, list);
			
			//根据set集合获取填充城市区域的详细信息集合
			getQYInfo(cityids, cityList);
			
			getQYInfo(areaids, areaList);
			
			
			model().add("list", list_Product.size()==0?"":list_Product);
			
			//排序城市+区域
			EntityUtils.sortList(cityList, "areaid", true);
			EntityUtils.sortList(areaList, "areaid", true);
			model().add("city", cityList.size()==0?"":cityList);
			model().add("area", areaList.size()==0?"":areaList);
			
			
			long areaid  = areaList.size()>0?areaList.get(0).getAreaid():0;
			long cityid  = cityList.size()>0?cityList.get(0).getAreaid():0;
			model().add("areaid", areaid);
			model().add("cityid", cityid);
			model().add("productid", productid);
			
			//加载商品包信息=========start
			getPackageSellInfoByProductidAndcityidAndareaid(String.valueOf(productid),String.valueOf(cityid),String.valueOf(areaid));
			//==================end
			
			//计算价格的单条记录
			LvzSellProductEntity model = RSBLL.getstance().getLvzSellProductService().getSellProductEntityList("  sell_upderdesc =  0 and product_id="+productid+" and city_id="+cityid+" and area_id="+areaid, 1, 99, "").size()>0?RSBLL.getstance().getLvzSellProductService().getSellProductEntityList(" sell_upderdesc =  0 and product_id="+productid+" and city_id="+cityid+" and area_id="+areaid, 1, 99, "").get(0):null;
			
			
			model().add("model", model==null?"":model);
			
			
			//商品相关信息查询
			LvzProductInfoEntity info = RSBLL.getstance().getInfoService().getProductInfoEntityList(" info_id="+productid, 1, 1, "").size()>0?RSBLL.getstance().getInfoService().getProductInfoEntityList(" info_id="+productid, 1, 1, "").get(0):null;
			if(info!=null){
				List<String> img = new ArrayList<String>();
				String images = info.getImage_url();
				String[] str = images.split(";");
				for(String s:str){
					img.add(s);
				}
				model().add("img", img);
				model().add("info", info);
			}
			
			
			//查询该商品对应的一级+2级菜单
			String p_code = "0";
			String c_code = "0";
			LvzProductEntity pm = RSBLL.getstance().getLvzProductService().getProductEntityById(productid);
			
			if(pm!=null){
				p_code = pm.getParent_cate_code();
				c_code = pm.getChild_cate_code();
			}
			
			LvzProductCateEntity catModel = RSBLL.getstance().getLvzProductCateService().getProductCateEntityByCode(p_code);
			
			if(catModel!=null){
				model().add("catModel", catModel);
			}
			
			LvzProductCateEntity catModel2 = RSBLL.getstance().getLvzProductCateService().getProductCateEntityByCode(c_code);
			
			if(catModel2!=null){
				model().add("catModel2", catModel2);
			}
			
			
			//product实体
			model().add("pModel",RSBLL.getstance().getLvzProductService().getProductEntityById(productid)==null?"":RSBLL.getstance().getLvzProductService().getProductEntityById(productid));
			model().add("productcode", pm.getProduct_code());
			
			
			//获取推荐的优惠券
			List<PacketVO> packetList = PreferentialMatchBuz.getInstance().matchPacket(0,pm.getProduct_code(),areaid+"",(double)model.getSell_overprice(), 2);
			if (!CollectionUtils.isEmpty(packetList)) {
				model().add("packets",packetList);
			}
			//相关服务
			getRef();
			//优惠券提示
//			getPreferential();
			
			//常见问题
			long catid2 =  RSBLL.getstance().getArticleCateRelationService().getArticleCateidByProductCateId(catModel2.getCate_id());
			
			List<FAQEntity> faqlist = RSBLL.getstance().getFAQService().getFAQList("cateid2="+catid2+" and state=1", 1, 3, "");
			model().add("faqlist", faqlist);
			
			//转到的页面路径
			model().add("LocationPage", new LocationPage("detail","index"));
		
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		//活动弹窗
		CommonUtils.activeFlag(beat());
		//活动右侧的小图标
		CommonUtils.activeFloatFlag(beat());
		
		return view("/index");
	}

	
	/**
	 * 根据商品id、城市id、区域id查询详情
	 * @param productid
	 * @return
	 */
	@Path("/details/{productid:\\d+}/{cityid:\\d+}/{areaid:\\d+}.html")
	public ActionResult details(long productid,long cityid,long areaid){
		
		try {
			
			
			//cityid和areaid的集合
			Set<Long> cityids = new HashSet<Long>();
			Set<Long> areaids = new HashSet<Long>();
			ArrayList<BFAreasEntity> cityList = new ArrayList<BFAreasEntity>();
			ArrayList<BFAreasEntity> areaList = new ArrayList<BFAreasEntity>();
			
			
			//获取商品集合
			String child_code = RSBLL.getstance().getLvzProductService().getProductEntityById(productid)==null?"0":RSBLL.getstance().getLvzProductService().getProductEntityById(productid).getChild_cate_code();
			List<LvzProductEntity> list_Product = RSBLL.getstance().getLvzProductService().getProductEntityByChildcatecode(child_code);
			
			
			List<LvzSellProductEntity> list = RSBLL.getstance().getLvzSellProductService().getSellProductEntityList(" sell_upderdesc =  0 and product_id="+productid, 1, 99, "");
			
			//根据产品id填充相关的城市和区域不重复集合
			getSetIds(productid, cityids, areaids, list);
			
			//点击的商品不包含这个城市，重置选中的 城市
			if(!cityids.contains(cityid)){
				cityid = cityids.size()>0?new ArrayList<Long>(cityids).get(0):0;
			}
			
			//根据set集合获取填充城市区域的详细信息集合
			getQYInfo(cityids, cityList);
			
			//根据城市id和商品id查询区域集合
			
			getAreasSetIds(productid, cityid, areaids);
			//根据set集合获取填充区域的详细信息集合
			getQYInfo(areaids, areaList);
			
			
		
			
			//排序城市+区域
			EntityUtils.sortList(cityList, "areaid", true);
			EntityUtils.sortList(areaList, "areaid", true);
			
			
			
			//点击的城市不包含这个区域，重置选中的 区域
			if(!areaids.contains(areaid)){
				areaid  = areaList.size()>0?areaList.get(0).getAreaid():0;
			}
			
			
			
			//计算价格的单条记录
			LvzSellProductEntity model = RSBLL.getstance().getLvzSellProductService().getSellProductEntityList(" sell_upderdesc =  0 and product_id="+productid+" and city_id="+cityid+" and area_id="+areaid, 1, 99, "").size()>0?RSBLL.getstance().getLvzSellProductService().getSellProductEntityList(" sell_upderdesc =  0 and product_id="+productid+" and city_id="+cityid+" and area_id="+areaid, 1, 99, "").get(0):null;
			
			model().add("list", list_Product==null?"":list_Product);
			model().add("city", cityList==null?"":cityList);
			model().add("area", areaList==null?"":areaList);
			
			model().add("areaid", areaid);
			model().add("cityid", cityid);
			model().add("productid", productid);
			
			model().add("model", model==null?"":model);
			
			//商品相关信息查询
			LvzProductInfoEntity info = RSBLL.getstance().getInfoService().getProductInfoEntityList(" info_id="+productid, 1, 1, "").size()>0?RSBLL.getstance().getInfoService().getProductInfoEntityList(" info_id="+productid, 1, 1, "").get(0):null;
			if(info!=null){
				List<String> img = new ArrayList<String>();
				String images = info.getImage_url();
				String[] str = images.split(";");
				for(String s:str){
					img.add(s);
				}
				model().add("img", img);
				model().add("info", info);
			}
			
			//查询该商品对应的一级+2级菜单
			String p_code = "0";
			String c_code = "0";
					LvzProductEntity  pm=		RSBLL.getstance().getLvzProductService().getProductEntityById(productid);
			
			if(pm!=null){
				p_code = pm.getParent_cate_code();
				c_code = pm.getChild_cate_code();
			}
			
			LvzProductCateEntity catModel = RSBLL.getstance().getLvzProductCateService().getProductCateEntityByCode(p_code);
			
			if(catModel!=null){
				model().add("catModel", catModel);
			}
			
			LvzProductCateEntity catModel2 = RSBLL.getstance().getLvzProductCateService().getProductCateEntityByCode(c_code);
			
			if(catModel2!=null){
				model().add("catModel2", catModel2);
			}

			//product实体
			model().add("pModel",RSBLL.getstance().getLvzProductService().getProductEntityById(productid)==null?"":RSBLL.getstance().getLvzProductService().getProductEntityById(productid));
			
			//相关服务
			getRef();
			
			//常见问题
			long catid2 =  RSBLL.getstance().getArticleCateRelationService().getArticleCateidByProductCateId(catModel2.getCate_id());
			
			List<FAQEntity> faqlist = RSBLL.getstance().getFAQService().getFAQList("cateid2="+catid2+" and state=1", 1, 3, "");
			model().add("faqlist", faqlist);
			
			//转到的页面路径
			model().add("LocationPage", new LocationPage("detail","index"));
			
			//加载商品包信息=========start
			getPackageSellInfoByProductidAndcityidAndareaid(String.valueOf(productid),String.valueOf(cityid),String.valueOf(areaid));
			//==================end
		
		
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return view("/index");
	}
	
	
	/**
	 * 根据商品id、城市id、区域id查询价格并且异步返回
	 * @param pid|cityid|areaid
	 * @return
	 */
	@Path("/detail/queryPrice")
	public ActionResult queryPrice(){
		
			String pid = beat().getRequest().getParameter("pid");
			String cityid = beat().getRequest().getParameter("cityid");
			String areaid = beat().getRequest().getParameter("areaid");
			float sellprice = 0 ;
			float marketprice = 0 ;
			long  sellid = 0 ;
			Map map = new HashMap<String, Object>();
		
		try {
			List<LvzSellProductEntity> slist = RSBLL.getstance().getLvzSellProductService().getSellProductEntityList(" sell_upderdesc =  0 and product_id="+pid+" and city_id="+cityid+" and area_id="+areaid, 1, 99, "");
			
			if(slist!=null){
				if(slist.size()>0){
					 sellprice  = slist.get(0).getSell_overprice();
					 marketprice =  slist.get(0).getSell_markprice();
					 sellid = slist.get(0).getSell_id();
					 map.put("sellprice", sellprice);
					 map.put("marketprice", marketprice);
					 map.put("sellid", sellid);
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return ActionResultUtils.renderJson(JSON.toJSONString(map));
	}

	
	/**
	 * 根据选的城市切换区域列表
	 * @param pid|cityid|areaid
	 * @return
	 */
	@Path("/detail/queryCity")
	public ActionResult queryCity(){
		
			//获取参数
			String pid = beat().getRequest().getParameter("pid");
			String cityid = beat().getRequest().getParameter("cityid");
			String areaid = beat().getRequest().getParameter("areaid");
			
			//定义容器
			ArrayList<BFAreasEntity> areaList = new ArrayList<BFAreasEntity>();
			Set<Long> areaids = new HashSet<Long>();
			float sellprice = 0 ;
			float marketprice = 0 ;
			long  sellid = 0 ;
			Map map = new HashMap<String, Object>();
		
		try {
			//根据cityid获取区域代码集合
			getAreasSetIds(Long.valueOf(pid), Long.valueOf(cityid), areaids);
			//根据区域代码集合获取区域详细信息集合
			getQYInfo(areaids, areaList);
			map.put("area", areaList);
			//区域排序
			EntityUtils.sortList(areaList, "areaid", true);
			//点击的城市不包含这个区域，重置选中的 区域
			if(!areaids.contains(areaid)){
				areaid  = areaList.size()>0?String.valueOf(areaList.get(0).getAreaid()):"0";
			}
			
			//以下代码是筛选本城市的商品
			String child_code = RSBLL.getstance().getLvzProductService().getProductEntityById(Long.valueOf(pid))==null?"0":RSBLL.getstance().getLvzProductService().getProductEntityById(Long.valueOf(pid)).getChild_cate_code();
			List<LvzProductEntity> list_Product = RSBLL.getstance().getLvzProductService().getProductEntityByChildcatecode(child_code);
			List<LvzProductEntity> list_Product2 = new ArrayList<LvzProductEntity>();
			if(CollectionUtils.isNotEmpty(list_Product)){
				for (int i = 0; i < list_Product.size(); i++) {
					List<LvzSellProductEntity> selllist = RSBLL.getstance().getLvzSellProductService().getSellProductEntityList(" product_id="+list_Product.get(i).getProduct_id(), 1, 1, "");
				    Long sell_cityid = CollectionUtils.isEmpty(selllist)?1:selllist.get(0).getCity_id();
				    if(sell_cityid == Long.valueOf(cityid)){
				    	list_Product2.add(list_Product.get(i));
				    }
				}
			}
			map.put("list_Product", list_Product2);
			//以上代码是筛选本城市的商品
			
			
			//查询价格
			List<LvzSellProductEntity> slist = RSBLL.getstance().getLvzSellProductService().getSellProductEntityList(" sell_upderdesc =  0 and product_id="+pid+" and city_id="+cityid+" and area_id="+areaid, 1, 99, "");
			
			if(slist!=null){
				if(slist.size()>0){
					 sellprice  = slist.get(0).getSell_overprice();
					 marketprice =  slist.get(0).getSell_markprice();
					 sellid = slist.get(0).getSell_id();
					 map.put("sellprice", sellprice);
					 map.put("marketprice", marketprice);
					 map.put("sellid", sellid);
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return ActionResultUtils.renderJson(JSON.toJSONString(map));
	}



	
	//---------------extracted FUNCTIONS below-----------
	
	/**
	 * 
	 * 根据参数填充area区域的set集合
	 * @param productid
	 * @param cityid
	 * @param areaids
	 * @throws Exception
	 */
	public void getAreasSetIds(long productid, long cityid, Set<Long> areaids)
			throws Exception {
		List<LvzSellProductEntity> list2 = RSBLL.getstance().getLvzSellProductService().getSellProductEntityList("  sell_upderdesc =  0 and product_id="+productid+" and city_id="+cityid, 1, 99, "");
		areaids.clear();
		for(LvzSellProductEntity m:list2){
			areaids.add(m.getArea_id());
		}
	}
	/**
	 * 根据产品id填充相关的城市和区域不重复集合
	 * @param productid
	 * @param cityids
	 * @param areaids
	 * @param list
	 * @throws Exception
	 */
	public void getSetIds(long productid, Set<Long> cityids, Set<Long> areaids,
			List<LvzSellProductEntity> list) throws Exception {
		for(LvzSellProductEntity m:list){
			cityids.add(m.getCity_id());
		}
		long cityid_ = cityids.size()>0?new ArrayList<Long>(cityids).get(0):1; 
		//取得页面显示的区预集合
		List<LvzSellProductEntity> list_ = RSBLL.getstance().getLvzSellProductService().getSellProductEntityList("  sell_upderdesc =  0 and product_id="+productid+" and city_id="+cityid_, 1, 99, "");
		
		for(LvzSellProductEntity m:list_){
			areaids.add(m.getArea_id());
		}
	}

	/**
	 * 根据set集合获取填充城市区域的详细信息集合
	 * @param setids_
	 * @param setList
	 * @throws Exception
	 */
	public void getQYInfo(Set<Long> setids_, ArrayList<BFAreasEntity> setList)
			throws Exception {
		Iterator<Long> setids = setids_.iterator();
		
		while(setids.hasNext()){
			
			BFAreasEntity m = RSBLL.getstance().getCityService().getAeasEntityById(setids.next());
			if(m!=null){
				setList.add(m);
			}
		}
	}
	
	
	/**
	 * 相关服务
	 */
	public void getRef() {
		//相关服务
		List<Map<String, String>> reflist = new ArrayList<Map<String,String>>();
		for (int i = 1; i <= 3; i++) {
			Map refMap = new HashMap<String, String>();
			String name  = PropertiesUtils.getProp("ref"+i+".name");
			String tip   = PropertiesUtils.getProp("ref"+i+".tip");
			String price = PropertiesUtils.getProp("ref"+i+".price");
			String path  = PropertiesUtils.getProp("ref"+i+".path");
			refMap.put("name",name );
			refMap.put("tip",tip  ); 
			refMap.put("price",price); 
			refMap.put("path",path ); 
			reflist.add(refMap);
		}
		
		model().add("reflist", reflist);
	}
	
	/**
	 * 获取优惠券
	 */
	public void getPreferential(){
		List<PacketVO> showPackets = new ArrayList<PacketVO>();
		List<String> packetIds = new ArrayList<String>();
		packetIds.add("39601499874049");
		packetIds.add("39601455436289");
		for(String id : packetIds){
			//PacketVO p = PreferentialPCBuz.getInstance().getPacketById(id,null);
			//showPackets.add(p);
		}
		model().add("packets",showPackets);
	}
	
	
	/***
	 * 通过AJAX方法动态获取商品包信息
	 * @return
	 */
	@Path("/getPackageSellList")
	public ActionResult getPackageSellList(){
		String productid = request().getParameter("productid");
		String cityid = request().getParameter("cityid");
		String areaid = request().getParameter("areaid");
		if(StringUtils.isBlank(productid) || StringUtils.isBlank(cityid) || StringUtils.isBlank(areaid)){
			return view("/package/packageList");
		}
		getPackageSellInfoByProductidAndcityidAndareaid(productid,cityid,areaid);
		return view("/package/packageList");
	}
	
	public void getPackageSellInfoByProductidAndcityidAndareaid(String productid,String cityid,String areaid){
		//通过前台穿来的商品ID和城市ID，区域ID查找商品定价条目
		LvzSellProductEntity sellEntity = null;
		try {
			List<LvzSellProductEntity> sellProductEntityList = RSBLL.getstance().getLvzSellProductService().getSellProductEntityList(" sell_upderdesc = '0' and product_id='"+productid+"' and city_id='"+cityid+"' and area_id='"+areaid+"'", 1, 1, "");
			if(sellProductEntityList != null && !sellProductEntityList.isEmpty()){
				sellEntity = sellProductEntityList.get(0);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		if(null != sellEntity){
			List<LvzPackageSellEntity> packageSellList = new ArrayList<LvzPackageSellEntity>();
			Map<String,List<Map<String,String>>> sellProductMap = new HashMap<String, List<Map<String,String>>>();
			try {
				List<LvzPackageSellEntity> packageSellListBySellid = RSBLL.getstance().getPackageSellService().getLvzPackageSellListBySellid(String.valueOf(sellEntity.getSell_id()));  //
				if(null != packageSellListBySellid && !packageSellListBySellid.isEmpty()){
					for(LvzPackageSellEntity packageSellE : packageSellListBySellid){
						LvzPackageEntity lvzPackageEntity = RSBLL.getstance().getPackageService().getLvzPackageEntity(packageSellE.getPackage_id());
						//判断商品包是否为前台商品包
						if(lvzPackageEntity.getPackage_type() == 1){
							packageSellList.add(packageSellE);
							List<Map<String,String>> sellProductMapBySellids = getSellProductMapBySellids(packageSellE.getSellids());
							if(null != sellProductMapBySellids && !sellProductMapBySellids.isEmpty()){
								//获取sellids集合
								sellProductMap.put(String.valueOf(packageSellE.getPackagesell_id()), sellProductMapBySellids);
							}
						}
					}
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			if( packageSellList.size() > 0 ){
				model().add("packageSellList", packageSellList);
				model().add("sellProductMap", sellProductMap);
				model().add("ProductUtils", ProductUtils.class);
			}
		}
	}
	
	//通过商品包中包含的sellids字段获取定价条目集合
	public List<Map<String,String>> getSellProductMapBySellids(String sellids){
		if(StringUtils.isBlank(sellids)){
			return null;
		}
		List<Map<String,String>> sellList = new ArrayList<Map<String,String>>();
		//通过  , 号分割
		String[] idArr = sellids.split(",");
		for(int i=0;i<idArr.length;i++){
			Map<String,String> sellMap = new HashMap<String, String>();
			if(StringUtils.isBlank(idArr[i])){
				continue;
			}
			
			LvzSellProductEntity sellProductEntity = null;
			try {
				sellProductEntity = RSBLL.getstance().getLvzSellProductService().getSellProductEntityById(Long.parseLong(idArr[i]));
			} catch (NumberFormatException e) {
				e.printStackTrace();
			} catch (Exception e) {
				e.printStackTrace();
			}
			
			if(sellProductEntity != null){
				//sellList.add(sellProductEntity);
				try {
					sellMap.putAll(BeanUtils.describe(sellProductEntity));
				} catch (IllegalAccessException e1) {
					e1.printStackTrace();
				} catch (InvocationTargetException e1) {
					e1.printStackTrace();
				} catch (NoSuchMethodException e1) {
					e1.printStackTrace();
				}
				try {
					LvzProductEntity productEntityById = RSBLL.getstance().getLvzProductService().getProductEntityById(sellProductEntity.getProduct_id());
					if(null != productEntityById){
						LvzProductCateEntity productCateEntityByCode = RSBLL.getstance().getLvzProductCateService().getProductCateEntityByCode(productEntityById.getChild_cate_code());
						if(null != productCateEntityByCode){
							sellMap.put("cate_name", productCateEntityByCode.getCate_name());
						}
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
				sellList.add(sellMap);
			}
		}
		return sellList;
	}

	
	
	@Path("getPageListQAinfoByPrdtId")
	public ActionResult getPageListQAinfoByPrdtId(){
		return getPageListQAinfoByPage(1);
	}
	
	@Path("/getPageListByPage/{pageIndex:\\d+}")
	public ActionResult getPageListQAinfoByPage(int pageIndex){
		List<LvzQAinfoEntity> list = null;
		String prdtIdStr = request().getParameter("productId");
		String QAtype = request().getParameter("QAtype");
		String cityId = request().getParameter("cityId");
		
		String paramValue = "test=1";
		String condition = "1=1";
		int count = 0;
		int pageNum = pageIndex;
		int pageSize = 3;
		
		condition += "  and product_id='" + prdtIdStr + "'";
		paramValue += "&productId=" + prdtIdStr;
		condition += " and qa_type='" + QAtype + "'";
		paramValue += "&QAtype=" + QAtype;
		condition += " and city_id='" + cityId + "'";
		paramValue += "&cityId=" + cityId;
		try {
			count = RSBLL.getstance().getQAinfoService().getCountbyCondition(condition);
			list = RSBLL.getstance().getQAinfoService().getListByCondition(condition, pageNum, pageSize, "updatetime desc");
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		if(list != null){
			model().add("list", JSONArray.toJSONString(list, mapping));
		}
		// 构建分页
		PageUtils.buildPageModel(model(), pageNum, count, pageSize, "/commondetail/getPageListByPage",paramValue);
		return view("/productQA/productQAinfo");
	}
	
	
	@Path("getAllCountByEvaluationScope")
	public ActionResult getAllCountByEvaluationScope(){
		String prdtIdStr = request().getParameter("productid");
		String scope = request().getParameter("scope");
		String prdtCateId = "";
		
		LvzProductEntity prdtEntity = null;
		try {
			prdtEntity = RSBLL.getstance().getLvzProductService().getProductEntityById(Long.parseLong(prdtIdStr));
		} catch (Exception e1) {
			e1.printStackTrace();
		}
		
		LvzProductCateEntity prdtCateEntity = null;
		try {
			prdtCateEntity = RSBLL.getstance().getLvzProductCateService().getProductCateEntityByCode(prdtEntity.getChild_cate_code());
		} catch (Exception e1) {
			e1.printStackTrace();
		}
		prdtCateId = prdtCateEntity.getCate_id()+"";
		
		String[] scopeArr = scope.split("\\|");//通过"|" 分割  比如4-5|3-4|1-3
		Map<String, Integer> scopeMap = new HashMap<String, Integer>();
		for(int i=0;i<scopeArr.length;i++){
			String condition = "1=1 and product_cate_id='" + prdtCateEntity.getCate_id() + "'";
			//检测是否含有“-”  
			if(scopeArr[i].contains("~")){//按评分范围查询数据 比如  4-5
				String[] numArr = scopeArr[i].split("~");
				if(numArr.length == 1){//比如 5-  split后只会有一个
					condition += " and zhpf >='"+ numArr[0]+"'";
				}else{
					if(StringUtils.isNotBlank(numArr[0])){
						condition += " and zhpf >='"+ numArr[0]+"'";
					}
					if(StringUtils.isNotBlank(numArr[1])){
						condition += " and zhpf <'"+numArr[1]+"'";
					}
				}
			}
			
			int count = 0;
			try {
				count = RSBLL.getstance().getLvzCusEvaluationService().getCountbyCondition(condition);
			} catch (Exception e) {
				e.printStackTrace();
			}
			
			//由于jquery ajax 解析json数据时 类似于pingfenCount3-4 这种无法读取所有要将"-" 替换为 "_"
			//scopeMap.put("pingfenCount"+scopeArr[i].replace("-", "_"), count);
			scopeMap.put("pingfenCount"+scopeArr[i], count);
		}
		return ActionResultUtils.renderJson(JSONObject.toJSONString(scopeMap));
	}

}
